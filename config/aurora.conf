# Aurora Server Configuration File
#
# /etc/aurora.conf


[core]

# Server Name and Description:
#   These values are provided to REST API consumers as part of the server
#   information endpoint.
serverName=Aurora Light Controller
description=Have your lights and control them too!

# Port:
#   Port for the HTTP server.
port=5000

# Hostname
#   Hostname for the HTTP server. Should be 0.0.0.0 for external access.
hostname=0.0.0.0

# Debug:
#   When enabled the server will display debug messages.
debug=true

# OpenAPI:
#   When enabled the server hosts an API documentation page at [hostname]:[port]/swagger
#   For more information about the OpenAPI specification see https://www.openapis.org/
openapi=true

# Transitions:
#   When enabled the server will add fade transitions when
#   one level preset is being replaced with another
enableTransitions=true

# Transition Duration:
#   The length in seconds that each transition will take to complete.
transitionDuration=1


[hardware]

# Channels:
#   The hardware setup for the lights. Takes an array of Channel objects.
#   Each Channel object contains the following:
#
#      pin -- The WiringPi pin number for the channel
#      label -- The color of the channel. Should be red|blue|green|white
#      device -- Name of the device the channel is associated with
#
#
#   The following setup is for two LED strips named Ceiling and Backlight:
#
channels=
  [
    { "pin": 3, "label": "green", "device": "Ceiling" },
    { "pin": 2, "label": "red", "device": "Ceiling" },
    { "pin": 0, "label": "blue", "device": "Ceiling" },

    { "pin": 23, "label": "green", "device": "Backlight" },
    { "pin": 22, "label": "red", "device": "Backlight" },
    { "pin": 21, "label": "blue", "device": "Backlight" }
  ]


[audio]

# FIFO Path:
#   Location of the audio FIFO to read raw PCM bytes from.
#   If no FIFO exists one will be created.
fifoPath=/tmp/aurora-fifo

# Play Audio:
#   If set to true Aurora Server will play audio bytes to the speaker before
#   displaying them on the lights. If this is set to false the program writing
#   to the audio FIFO must write at the same rate that it is writing to the
#   speakers.
playAudio=true

# Sample Rate:
#   Sample rate of the incoming audio. When playAudio is true this is the rate
#   the audio will be played on the speakers. This value is usually 44100 or 48000
sampleRate=44100

# Chunk Size:
#   Chunk size of audio bytes being read from the FIFO at once. The visualizer will
#   perform a FFT on the audio bytes in chunks of this size. This value should stay
#   2048 unless playAudio is false.
chunkSize=2048

# Audio Channels:
#   Number of channels in the audio source. (1 for mono, 2 for stereo)
audioChannels=2


[visualizer]
filters=
  [
    {
      "name": "classic",
      "attenuate_pct": 50,
      "sd_low": 0.4,
      "sd_high": 0.85,
      "decay_factor": 0,
      "delay": 0.25,
      "min_frequency": 20,
      "max_frequency": 15000,
      "custom_channel_frequencies": 0
    },

    {
      "name": "smooth",
      "attenuate_pct": 50,
      "sd_low": 0.4,
      "sd_high": 0.85,
      "decay_factor": 0.0,
      "delay": 0.25,
      "min_frequency": 20,
      "max_frequency": 15000,
      "custom_channel_frequencies": 0
    },
    {
      "name": "mapped",
      "attenuate_pct": 50,
      "sd_low": 0.4,
      "sd_high": 0.85,
      "decay_factor": 0,
      "delay": 0.25,
      "min_frequency": 20,
      "max_frequency": 16000,
      "custom_channel_frequencies": [20, 63, 250, 2000, 6300, 16000]
    },
    {
      "name": "bass",
      "attenuate_pct": 50,
      "sd_low": 0.4,
      "sd_high": 0.85,
      "decay_factor": 0,
      "delay": 0.25,
      "min_frequency": 20,
      "max_frequency": 250,
      "custom_channel_frequencies": [20, 63, 250]
    },
    {
      "name": "bass-middle",
      "attenuate_pct": 50,
      "sd_low": 0.4,
      "sd_high": 0.85,
      "decay_factor": 0,
      "delay": 0.25,
      "min_frequency": 20,
      "max_frequency": 2000,
      "custom_channel_frequencies": [20, 63, 250, 2000]
    }
  ]